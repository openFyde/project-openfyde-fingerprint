diff --git a/biod/biod_storage.cc b/biod/biod_storage.cc
index c229db45ba..eba6a4cddf 100644
--- a/biod/biod_storage.cc
+++ b/biod/biod_storage.cc
@@ -70,14 +70,13 @@ bool BiodStorage::WriteRecord(
   }
 
   const std::string& record_id(record_metadata.record_id);
-  base::Value record_value(base::Value::Type::DICTIONARY);
-  record_value.SetStringKey(kLabel, record_metadata.label);
-  record_value.SetStringKey(kRecordId, record_id);
-  record_value.SetStringKey(kValidationVal,
-                            record_metadata.GetValidationValBase64());
-  record_value.SetIntKey(kVersionMember, kRecordFormatVersion);
-  record_value.SetKey(kData, std::move(data));
-  record_value.SetStringKey(kBioManagerMember, biometrics_manager_name_);
+  base::Value::Dict record_value;
+  record_value.Set(kLabel, record_metadata.label);
+  record_value.Set(kRecordId, record_id);
+  record_value.Set(kValidationVal, record_metadata.GetValidationValBase64());
+  record_value.Set(kVersionMember, kRecordFormatVersion);
+  record_value.Set(kData, std::move(data));
+  record_value.Set(kBioManagerMember, biometrics_manager_name_);
 
   std::string json_string;
   JSONStringValueSerializer json_serializer(&json_string);
@@ -120,12 +119,12 @@ bool BiodStorage::WriteRecord(
 }
 
 std::unique_ptr<std::vector<uint8_t>>
-BiodStorage::ReadValidationValueFromRecord(const base::Value& record_dictionary,
-                                           const FilePath& record_path) {
+BiodStorage::ReadValidationValueFromRecord(
+    const base::Value::Dict& record_dictionary, const FilePath& record_path) {
   std::string validation_val_str;
 
   const std::string* validation_val_str_ptr =
-      record_dictionary.FindStringKey(kValidationVal);
+      record_dictionary.FindString(kValidationVal);
   if (!validation_val_str_ptr) {
     LOG(WARNING) << "Cannot read validation value from " << record_path.value()
                  << ".";
@@ -225,19 +224,19 @@ std::optional<BiodStorageInterface::Record> BiodStorage::ReadRecordFromPath(
   auto record_value = base::JSONReader::ReadAndReturnValueWithError(
       json_string, base::JSON_ALLOW_TRAILING_COMMAS);
 
-  if (!record_value.value) {
-    LOG_IF(ERROR, !record_value.error_message.empty())
-        << "JSON error message: " << record_value.error_message << ".";
+  if (!record_value.has_value()) {
+    LOG_IF(ERROR, !record_value.error().message.empty())
+        << "JSON error message: " << record_value.error().message << ".";
     return record;
   }
 
-  if (!record_value.value->is_dict()) {
+  if (!record_value->is_dict()) {
     LOG(ERROR) << "Value " << record_path.value() << " is not a dictionary.";
     return record;
   }
-  base::Value record_dictionary = std::move(*record_value.value);
+  base::Value::Dict record_dictionary = std::move(record_value->GetDict());
 
-  const std::string* record_id = record_dictionary.FindStringKey(kRecordId);
+  const std::string* record_id = record_dictionary.FindString(kRecordId);
 
   if (!record_id) {
     LOG(ERROR) << "Cannot read record id from " << record_path.value() << ".";
@@ -252,7 +251,7 @@ std::optional<BiodStorageInterface::Record> BiodStorage::ReadRecordFromPath(
     return record;
   }
 
-  const std::string* label = record_dictionary.FindStringKey(kLabel);
+  const std::string* label = record_dictionary.FindString(kLabel);
 
   if (!label) {
     LOG(ERROR) << "Cannot read label from " << record_path.value() << ".";
@@ -261,7 +260,7 @@ std::optional<BiodStorageInterface::Record> BiodStorage::ReadRecordFromPath(
   record.metadata.label = *label;
 
   std::optional<int> record_format_version =
-      record_dictionary.FindIntKey(kVersionMember);
+      record_dictionary.FindInt(kVersionMember);
   if (!record_format_version.has_value()) {
     LOG(ERROR) << "Cannot read record format version from "
                << record_path.value() << ".";
@@ -290,13 +289,13 @@ std::optional<BiodStorageInterface::Record> BiodStorage::ReadRecordFromPath(
   }
   record.metadata.validation_val = *validation_val;
 
-  const base::Value* data = record_dictionary.FindKey(kData);
+  const std::string* data = record_dictionary.FindString(kData);
 
   if (!data) {
     LOG(ERROR) << "Cannot read data from " << record_path.value() << ".";
     return record;
   }
-  record.data = data->GetString();
+  record.data = *data;
 
   record.valid = true;
   return record;
diff --git a/biod/biod_storage.h b/biod/biod_storage.h
index 3d4b9e0906..7f20cbbbba 100644
--- a/biod/biod_storage.h
+++ b/biod/biod_storage.h
@@ -146,7 +146,7 @@ class BiodStorage : public BiodStorageInterface {
 
   // Read validation value from |record_dictionary| and store in |output|.
   static std::unique_ptr<std::vector<uint8_t>> ReadValidationValueFromRecord(
-      const base::Value& record_dictionary,
+      const base::Value::Dict& record_dictionary,
       const base::FilePath& record_path);
 
   // Read all records from file for all users in the set. Called whenever biod
diff --git a/biod/biometrics_daemon.cc b/biod/biometrics_daemon.cc
index 9145b94c46..6f30a00519 100644
--- a/biod/biometrics_daemon.cc
+++ b/biod/biometrics_daemon.cc
@@ -54,7 +54,7 @@ BiometricsManagerWrapper::BiometricsManagerWrapper(
     std::unique_ptr<BiometricsManager> biometrics_manager,
     ExportedObjectManager* object_manager,
     ObjectPath object_path,
-    const AsyncEventSequencer::CompletionAction& completion_callback)
+    AsyncEventSequencer::CompletionAction completion_callback)
     : biometrics_manager_(std::move(biometrics_manager)),
       dbus_object_(object_manager, object_manager->GetBus(), object_path),
       object_path_(std::move(object_path)),
@@ -99,7 +99,7 @@ BiometricsManagerWrapper::BiometricsManagerWrapper(
       kBiometricsManagerStartAuthSessionMethod,
       base::BindRepeating(&BiometricsManagerWrapper::StartAuthSession,
                           base::Unretained(this)));
-  dbus_object_.RegisterAsync(completion_callback);
+  dbus_object_.RegisterAsync(std::move(completion_callback));
 
   RefreshRecordObjects();
 }
diff --git a/biod/biometrics_daemon.h b/biod/biometrics_daemon.h
index c7da96594e..c66639ba2e 100644
--- a/biod/biometrics_daemon.h
+++ b/biod/biometrics_daemon.h
@@ -28,7 +28,7 @@ class BiometricsManagerWrapper {
       std::unique_ptr<BiometricsManager> biometrics_manager,
       brillo::dbus_utils::ExportedObjectManager* object_manager,
       dbus::ObjectPath object_path,
-      const brillo::dbus_utils::AsyncEventSequencer::CompletionAction&
+      brillo::dbus_utils::AsyncEventSequencer::CompletionAction
           completion_callback);
   BiometricsManagerWrapper(const BiometricsManagerWrapper&) = delete;
   BiometricsManagerWrapper& operator=(const BiometricsManagerWrapper&) = delete;
diff --git a/biod/fyde_mafp_device.cc b/biod/fyde_mafp_device.cc
index 2e6b2ace52..4ed5f4ad38 100644
--- a/biod/fyde_mafp_device.cc
+++ b/biod/fyde_mafp_device.cc
@@ -16,7 +16,6 @@
 #include <base/callback_helpers.h>
 #include <base/check.h>
 #include <base/logging.h>
-#include <base/optional.h>
 #include <base/strings/string_number_conversions.h>
 #include <base/strings/stringprintf.h>
 #include <chromeos/ec/ec_commands.h>
@@ -439,7 +438,7 @@ namespace biod {
     return true;
   }
 
-  base::Optional<int> MafpDevice::GetIndexOfLastTemplate() {
+  absl::optional<int> MafpDevice::GetIndexOfLastTemplate() {
     if (templates_.size() < 1)
       return std::nullopt;
     return templates_.size() - 1;
diff --git a/biod/fyde_mafp_device.h b/biod/fyde_mafp_device.h
index c2a3b18626..40adc4f82c 100644
--- a/biod/fyde_mafp_device.h
+++ b/biod/fyde_mafp_device.h
@@ -49,7 +49,7 @@ class MafpDevice : public CrosFpDeviceInterface {
   // Run a simple command to get the version information from FP MCU and check
   // whether the image type returned is the same as |expected_image|.
   static bool WaitOnEcBoot(const base::ScopedFD& cros_fp_fd,
-                           ec_current_image expected_image);
+                           ec_image expected_image);
 
   // Run a simple command to get the version information from FP MCU.
   static std::optional<EcVersion> GetVersion(const base::ScopedFD& cros_fp_fd);
@@ -95,7 +95,7 @@ class MafpDevice : public CrosFpDeviceInterface {
 
   bool Init();
 
-  base::Optional<std::string> ReadVersion();
+  absl::optional<std::string> ReadVersion();
 
  private:
   // Get block id from rollback info.
@@ -108,7 +108,7 @@ class MafpDevice : public CrosFpDeviceInterface {
   void RemoveOneShouldRemovedTemplate();
 
   static void OnHalNotify(const fingerprint_msg_t *msg);
-  base::Optional<int> GetIndexOfLastTemplate();
+  absl::optional<int> GetIndexOfLastTemplate();
 
   bool ResetFpDevice();
 
diff --git a/biod/lib_fp_device.h b/biod/lib_fp_device.h
index a207ad0cec..37e67c3d24 100644
--- a/biod/lib_fp_device.h
+++ b/biod/lib_fp_device.h
@@ -49,7 +49,7 @@ class LibFpDevice : public CrosFpDeviceInterface {
   // Run a simple command to get the version information from FP MCU and check
   // whether the image type returned is the same as |expected_image|.
   static bool WaitOnEcBoot(const base::ScopedFD& cros_fp_fd,
-                           ec_current_image expected_image);
+                           ec_image expected_image);
 
   // Run a simple command to get the version information from FP MCU.
   static std::optional<EcVersion> GetVersion(const base::ScopedFD& cros_fp_fd);
diff --git a/biod/power_button_filter.cc b/biod/power_button_filter.cc
index d9ded6fb51..5c25635883 100644
--- a/biod/power_button_filter.cc
+++ b/biod/power_button_filter.cc
@@ -19,19 +19,13 @@ namespace biod {
 
 std::unique_ptr<PowerButtonFilterInterface> PowerButtonFilter::Create(
     const scoped_refptr<dbus::Bus>& bus) {
-  auto config = std::make_unique<brillo::CrosConfig>();
-  // Init won't succeed on non-unibuild boards. If it fails, reset config to
-  // null.
-  if (!config->Init()) {
-    config = nullptr;
-  }
-
   auto power_button_filter = base::WrapUnique(new PowerButtonFilter());
   // DefaultTickClock uses TimeTicks with clock of type CLOCK_MONOTONIC in the
   // background. CLOCK_MONOTONIC advances monotonically while the system is in
   // S0. Note that CLOCK_MONOTONIC stands still when the system is suspended.
   // But that should not cause any problems in this use case.
-  power_button_filter->Init(PowerManagerClient::Create(bus), std::move(config),
+  power_button_filter->Init(PowerManagerClient::Create(bus),
+                            std::make_unique<brillo::CrosConfig>(),
                             std::make_unique<base::DefaultTickClock>());
   return power_button_filter;
 }
diff --git a/biod/tools/bio_fw_updater.cc b/biod/tools/bio_fw_updater.cc
index bdfad47329..d1716b8c2e 100644
--- a/biod/tools/bio_fw_updater.cc
+++ b/biod/tools/bio_fw_updater.cc
@@ -115,10 +115,6 @@ int main(int argc, char* argv[]) {
 
   // Check if model supports fingerprint
   brillo::CrosConfig cros_config;
-  if (!cros_config.Init()) {
-    LOG(WARNING) << "Cros config is not supported on this model, continuing "
-                    "with legacy update.";
-  }
   if (biod::FingerprintUnsupported(&cros_config)) {
     LOG(INFO) << "Fingerprint is not supported on this model, exiting.";
     return EXIT_SUCCESS;
diff --git a/biod/tools/bio_wash.cc b/biod/tools/bio_wash.cc
index ce8576e584..9e7472d920 100644
--- a/biod/tools/bio_wash.cc
+++ b/biod/tools/bio_wash.cc
@@ -34,15 +34,7 @@ constexpr char kHelpMessage[] = "bio_wash resets the SBP.";
 
 bool IsFingerprintUnsupported() {
   brillo::CrosConfig cros_config;
-  if (!cros_config.Init()) {
-    LOG(WARNING) << "Cros config is not supported on this model, continuing "
-                    "in legacy mode.";
-    return false;
-  }
-  if (biod::FingerprintUnsupported(&cros_config)) {
-    return true;
-  }
-  return false;
+  return biod::FingerprintUnsupported(&cros_config);
 }
 
 int DoBioWash(const bool factory_init = false) {
