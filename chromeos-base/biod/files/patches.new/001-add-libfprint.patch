Index: biod/BUILD.gn
===================================================================
--- biod.orig/BUILD.gn
+++ biod/BUILD.gn
@@ -30,8 +30,9 @@ group("all") {
 pkg_config("target_defaults") {
   # TODO(crbug.com/993557): Remove |fp_on_power_button| USE flag when nocturne
   # is EOL.
+  defines = [ ]
   if (use.fp_on_power_button) {
-    defines = [ "FP_ON_POWER_BUTTON" ]
+    defines += [ "FP_ON_POWER_BUTTON" ]
   }
 
   # NOSORT
@@ -55,6 +56,13 @@ pkg_config("target_defaults") {
   } else {
     pkg_deps += [ "protobuf-lite" ]
   }
+  if (use.libfprint) {
+    pkg_deps += [
+      "libfprint-2",
+      "glib-2.0",
+     ]
+    defines += [ "LIB_FPRINT" ]
+  }
 }
 
 static_library("libbiod") {
@@ -67,6 +75,7 @@ static_library("libbiod") {
     "biometrics_daemon.cc",
     "cros_fp_biometrics_manager.cc",
     "cros_fp_device.cc",
+    "lib_fp_device.cc",
     "cros_fp_firmware.cc",
     "cros_fp_record_manager.cc",
     "crypto_init/bio_crypto_init.cc",
Index: biod/cros_fp_device.h
===================================================================
--- biod.orig/cros_fp_device.h
+++ biod/cros_fp_device.h
@@ -51,6 +51,10 @@ class CrosFpDevice : public CrosFpDevice
   // CrosFpDeviceInterface overrides:
   ~CrosFpDevice() override;
 
+  CrosFpDeviceInterface::CrosFpType GetDeviceType() override {
+    return CrosFpDeviceInterface::CrosFpType::CROS_FP;
+  }
+
   bool SetFpMode(const ec::FpMode& mode) override;
   ec::FpMode GetFpMode() override;
   std::optional<FpStats> GetFpStats() override;
Index: biod/cros_fp_device_interface.h
===================================================================
--- biod.orig/cros_fp_device_interface.h
+++ biod/cros_fp_device_interface.h
@@ -40,6 +40,13 @@ class CrosFpDeviceInterface {
     ec_image current_image = EC_IMAGE_UNKNOWN;
   };
 
+  enum class CrosFpType:int {
+    CROS_FP,
+    LIB_FP
+  };
+
+  virtual CrosFpType GetDeviceType() = 0;
+
   virtual void SetMkbpEventCallback(MkbpCallback callback) = 0;
 
   struct FpStats {
Index: biod/lib_fp_device.h
===================================================================
--- /dev/null
+++ biod/lib_fp_device.h
@@ -0,0 +1,145 @@
+// Copyright 2018 The Chromium OS Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+#ifndef BIOD_LIB_FP_DEVICE_H_
+#define BIOD_LIB_FP_DEVICE_H_
+
+#include <bitset>
+#include <memory>
+#include <string>
+#include <utility>
+#include <vector>
+#include <optional>
+#include <thread>
+
+#include <base/files/file_descriptor_watcher_posix.h>
+#include <base/files/file_util.h>
+#include <libec/ec_command_factory.h>
+#include <libec/fingerprint/fp_info_command.h>
+#include <libec/fingerprint/fp_mode.h>
+#include <pthread.h>
+
+#include "biod/biod_metrics.h"
+#include "biod/cros_fp_device_interface.h"
+
+extern "C" {
+#include <fprint.h>
+#include <glib-unix.h>
+}
+
+namespace biod {
+
+class LibFpDevice : public CrosFpDeviceInterface {
+ public:
+  static std::unique_ptr<LibFpDevice> Create(
+      BiodMetricsInterface* biod_metrics,
+      std::unique_ptr<ec::EcCommandFactoryInterface> ec_command_factory) {
+    // Using new to access non-public constructor.
+    // See https://abseil.io/tips/134.
+    auto dev = base::WrapUnique(
+        new LibFpDevice(biod_metrics, std::move(ec_command_factory)));
+    if (!dev->Init()) {
+      return nullptr;
+    }
+    return dev;
+  }
+
+  void SetMkbpEventCallback(MkbpCallback callback) override;
+
+  // Run a simple command to get the version information from FP MCU and check
+  // whether the image type returned is the same as |expected_image|.
+  static bool WaitOnEcBoot(const base::ScopedFD& cros_fp_fd,
+                           ec_current_image expected_image);
+
+  // Run a simple command to get the version information from FP MCU.
+  static std::optional<EcVersion> GetVersion(const base::ScopedFD& cros_fp_fd);
+
+  // CrosFpDeviceInterface overrides:
+  ~LibFpDevice() override;
+
+  CrosFpDeviceInterface::CrosFpType GetDeviceType() override {
+    return CrosFpDeviceInterface::CrosFpType::LIB_FP;
+  }
+  bool SetFpMode(const ec::FpMode& mode) override;
+  ec::FpMode GetFpMode() override;
+  std::optional<CrosFpDeviceInterface::FpStats> GetFpStats() override;
+  std::optional<std::bitset<32>> GetDirtyMap() override;
+  bool SupportsPositiveMatchSecret() override;
+  std::optional<brillo::SecureVector> GetPositiveMatchSecret(
+      int index) override;
+  std::unique_ptr<VendorTemplate> GetTemplate(int index) override;
+  bool UploadTemplate(const VendorTemplate& tmpl) override;
+  bool SetContext(std::string user_id) override;
+  bool ResetContext() override;
+  // Initialise the entropy in the SBP. If |reset| is true, the old entropy
+  // will be deleted. If |reset| is false, we will only add entropy, and only
+  // if no entropy had been added before.
+  bool InitEntropy(bool reset) override;
+  bool UpdateFpInfo() override;
+
+  int MaxTemplateCount() override;
+  int TemplateVersion() override;
+  int DeadPixelCount() override;
+
+  ec::EcCmdVersionSupportStatus EcCmdVersionSupported(uint16_t cmd,
+                                                      uint32_t ver) override;
+
+ protected:
+  LibFpDevice(
+      BiodMetricsInterface* biod_metrics,
+      std::unique_ptr<ec::EcCommandFactoryInterface> ec_command_factory)
+      : ec_command_factory_(std::move(ec_command_factory)),
+        biod_metrics_(biod_metrics),
+        mode_(ec::FpMode(ec::FpMode::Mode::kModeInvalid)) {}
+
+  bool Init();
+
+  base::Optional<std::string> ReadVersion();
+
+ private:
+  // Get block id from rollback info.
+  static void OnMatchCb(FpDevice *dev, FpPrint *match, FpPrint *print,
+     void *user_data, GError *error);
+  static void OnEnrollProgress(FpDevice *device, int completed_stages, FpPrint *print,
+     void *user_data, GError *error);
+  static void OnFingerStateChanged(FpDevice *dev, void *user_data);
+  static void OnActionCompleted(FpDevice *dev, void *user_data);
+
+  base::Optional<int> GetIndexOfLastTemplate();
+
+  bool ResetFpDevice();
+
+  void StartIdentify();
+  void StartVerify();
+  void StartEnroll();
+  bool OpenFpDevice();
+  void SetReadFpState();
+  void ReportResult(uint32_t result);
+  void HandleStorageFull();
+  void OnEventReadable();
+  std::unique_ptr<VendorTemplate> GetTemplateInternal(int index);
+  std::unique_ptr<ec::EcCommandFactoryInterface> ec_command_factory_;
+  MkbpCallback mkbp_event_;
+  uint32_t last_result_;
+
+  BiodMetricsInterface* biod_metrics_ = nullptr;  // Not owned.
+  bool has_feature_identify_;
+  bool has_feature_storage_;
+  ec::FpMode mode_;
+  std::string user_hex_;
+  std::bitset<32> dirty_;
+  std::thread thread_;
+
+  FpContext *fp_context_ = NULL;
+  FpDevice *fp_device_ = NULL;
+  GCancellable *cancellable_ = NULL;
+  GPtrArray *fprints_ = NULL;
+  pthread_t self_pid_;
+  std::unique_ptr<base::FileDescriptorWatcher::Controller> watcher_;
+  base::ScopedFD read_fd_;
+  base::ScopedFD write_fd_;
+};
+
+}  // namespace biod
+
+#endif  // BIOD_LIB_FP_DEVICE_H_
Index: biod/lib_fp_device.cc
===================================================================
--- /dev/null
+++ biod/lib_fp_device.cc
@@ -0,0 +1,635 @@
+// Copyright 2022 The FydeOS Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "biod/lib_fp_device.h"
+
+#include <errno.h>
+#include <fcntl.h>
+#include <sys/ioctl.h>
+
+#include <algorithm>
+
+#include <base/bind.h>
+#include <base/callback_helpers.h>
+#include <base/check.h>
+#include <base/logging.h>
+#include <base/optional.h>
+#include <base/strings/string_number_conversions.h>
+#include <base/strings/stringprintf.h>
+#include <chromeos/ec/ec_commands.h>
+#include <chrono>
+#include <base/metrics/crc32.h>
+#include "biod/cros_fp_device.h"
+
+#define LIB_FP_TEMPLATE_FORMAT_VERSION 0x1
+#define MAX_TEMPLATE_COUNT 5
+#define CAST_TO_LFD(context) (reinterpret_cast<LibFpDevice*>(context))
+
+using ec::FpMode;
+using ec::EcCmdVersionSupportStatus;
+
+namespace {
+
+uint32_t TransFpDeviceRetryToCrosFpEvent(int code) {
+  switch(code) {
+    case FP_DEVICE_RETRY_GENERAL:
+      return EC_MKBP_FP_ERR_ENROLL_LOW_QUALITY;
+    case FP_DEVICE_RETRY_TOO_SHORT:
+      return EC_MKBP_FP_ERR_ENROLL_LOW_QUALITY;
+    case FP_DEVICE_RETRY_CENTER_FINGER:
+      return EC_MKBP_FP_ERR_ENROLL_LOW_COVERAGE;
+    case FP_DEVICE_RETRY_REMOVE_FINGER:
+      return EC_MKBP_FP_ERR_ENROLL_IMMOBILE;
+    default:
+      return EC_MKBP_FP_ERR_ENROLL_INTERNAL;
+  }
+}
+
+uint32_t GetEnrollProgress(int progress, int nr) {
+  if (progress == nr)
+    return 99 << EC_MKBP_FP_ENROLL_PROGRESS_OFFSET;
+  return ((uint32_t)((progress * 100) / nr)) << EC_MKBP_FP_ENROLL_PROGRESS_OFFSET;
+}
+
+uint32_t GetFullProgress() {
+  return 100 << EC_MKBP_FP_ENROLL_PROGRESS_OFFSET;
+}
+
+uint32_t GetMatchIDX(uint32_t index) {
+  return index << EC_MKBP_FP_MATCH_IDX_OFFSET;
+}
+
+uint32_t TransFpDeviceMatchToCrosFpEvent(int code) {
+  switch(code) {
+    case FP_DEVICE_RETRY_GENERAL:
+    case FP_DEVICE_RETRY_TOO_SHORT:
+      return EC_MKBP_FP_ERR_MATCH_NO_LOW_QUALITY;
+    case FP_DEVICE_RETRY_CENTER_FINGER:
+      return EC_MKBP_FP_ERR_MATCH_NO_LOW_COVERAGE;
+    case FP_DEVICE_RETRY_REMOVE_FINGER:
+      return EC_MKBP_FP_ERR_MATCH_NO_LOW_QUALITY;
+    default:
+      return EC_MKBP_FP_ERR_MATCH_NO_INTERNAL;
+  }
+}
+
+void SetupFpPrint(FpPrint *fp, std::string& user_hex) {
+  gint year, month, day;
+  g_autoptr(GDateTime) datetime = g_date_time_new_now_local();
+  g_date_time_get_ymd(datetime, &year, &month, &day);
+  g_autoptr(GDate) date = g_date_new_dmy(static_cast<GDateDay>(day),
+                                         static_cast<GDateMonth>(month),
+                                         static_cast<GDateYear>(year));
+  fp_print_set_finger(fp, FP_FINGER_RIGHT_INDEX);
+  fp_print_set_username(fp, g_get_user_name());
+  fp_print_set_description(fp, user_hex.c_str());
+  fp_print_set_enroll_date(fp, date);
+}
+
+static inline uint32_t Crc32(const void* buffer, uint32_t len) {
+  return ~base::Crc32(std::numeric_limits<uint32_t>::max(), buffer, len);
+}
+
+} //namespace
+
+
+namespace biod {
+
+struct ec_fp_template_encryption_metadata_ext {
+  struct ec_fp_template_encryption_metadata meta;
+  gsize template_size;
+};
+
+LibFpDevice *g_libfpdev = NULL;
+
+bool LibFpDevice::SupportsPositiveMatchSecret() {
+  return true;
+}
+
+std::optional<brillo::SecureVector> LibFpDevice::GetPositiveMatchSecret(
+      int index) {
+  LOG(INFO) << __func__ << " index:" << index;
+  if (index == CrosFpDevice::kLastTemplate) {
+    auto opt_index = GetIndexOfLastTemplate();
+    if (!opt_index)
+      return std::nullopt;
+    index = *opt_index;
+  }
+  std::unique_ptr<VendorTemplate> templ = GetTemplateInternal(index);
+  if (!templ)
+    return std::nullopt;
+  LOG(INFO) << __func__ << " get secret data.";
+  uint32_t sec_data = Crc32(templ->data(), templ->size());
+  brillo::SecureVector secret(sizeof sec_data);
+  std::memcpy(secret.data(), &sec_data, sizeof sec_data);
+  return secret;
+}
+
+void LibFpDevice::SetMkbpEventCallback(MkbpCallback callback) {
+  mkbp_event_ = callback;
+}
+
+LibFpDevice::~LibFpDevice() {
+  LOG(INFO) << __func__;
+  if (fp_device_ && mode_ != FpMode(FpMode::Mode::kNone)) {
+    ResetFpDevice();
+    if (cancellable_)
+      g_clear_object(&cancellable_);
+    if (fp_device_is_open(fp_device_) && !fp_device_close_sync(fp_device_, NULL, NULL))
+      LOG(ERROR) << "Failed to close fingerprinter " << fp_device_get_name(fp_device_);
+    g_object_unref(fp_device_);
+  }
+  if (fprints_)
+    g_ptr_array_free(fprints_, true);
+  if (fp_context_)
+    g_object_unref(fp_context_);
+  g_libfpdev = NULL;
+  LOG(INFO) << "LibFpDevice released.";
+}
+
+std::optional<CrosFpDeviceInterface::FpStats> LibFpDevice::GetFpStats() {
+  return std::nullopt;
+}
+
+bool LibFpDevice::InitEntropy(bool reset) {
+  return true;
+}
+
+std::optional<std::string> LibFpDevice::ReadVersion() {
+  return std::string("1.0");
+}
+
+EcCmdVersionSupportStatus LibFpDevice::EcCmdVersionSupported(uint16_t cmd_code,
+                                                             uint32_t ver) {
+  return EcCmdVersionSupportStatus::UNSUPPORTED;
+}
+
+bool LibFpDevice::UpdateFpInfo() {
+  FpDeviceFeature features = fp_device_get_features(fp_device_);
+  has_feature_identify_ = fp_device_has_feature(fp_device_, FP_DEVICE_FEATURE_IDENTIFY);
+  has_feature_storage_ = fp_device_has_feature(fp_device_, FP_DEVICE_FEATURE_STORAGE);
+  LOG(INFO) << "LibFpDevice:" << fp_device_get_name(fp_device_) <<" feature:" << std::endl
+     << "identity:" << has_feature_identify_ << std::endl
+     << "storage:" << has_feature_storage_ << std::endl
+     << "others:" << std::hex << (int) features;
+  return true;
+}
+
+int LibFpDevice::MaxTemplateCount() {
+  return has_feature_identify_ ? MAX_TEMPLATE_COUNT : 1;
+}
+
+int LibFpDevice::TemplateVersion() {
+  return LIB_FP_TEMPLATE_FORMAT_VERSION;
+}
+
+int LibFpDevice::DeadPixelCount() {
+  return 0;
+}
+
+FpMode LibFpDevice::GetFpMode() {
+  LOG(INFO) << __func__ << mode_;
+  return mode_;
+}
+
+bool LibFpDevice::ResetFpDevice() {
+  if (!fp_device_) {
+    LOG(ERROR) << "no finger device exist.";
+    return false;
+  }
+
+  if (mode_ == FpMode(FpMode::Mode::kEnrollSessionEnrollImage) ||
+      mode_ == FpMode(FpMode::Mode::kMatch)) {
+    LOG(ERROR) << "Reset from kMatch/kEnroll";
+    if (!g_cancellable_is_cancelled(cancellable_)) {
+      g_cancellable_cancel(cancellable_);
+      g_clear_object(&cancellable_);
+      cancellable_ = g_cancellable_new();
+    }
+    if (thread_.joinable())
+      thread_.join();
+    LOG(ERROR) << "End cancell";
+  }
+
+  mode_ = FpMode(FpMode::Mode::kNone);
+  last_result_ = 0;
+  return true;
+}
+
+void LibFpDevice::OnEnrollProgress(FpDevice *device, int completed_stages, FpPrint *print,
+  void *user_data, GError *error) {
+  LibFpDevice *lfd = CAST_TO_LFD(user_data);
+  uint32_t result = EC_MKBP_FP_ENROLL;
+  LOG(INFO) << __func__;
+  if (error) {
+    LOG(WARNING) << "Enroll stage " << completed_stages << " of " << fp_device_get_nr_enroll_stages(device)
+      << " failed with error:" << error->message << " code:" << error->code;
+    result |= TransFpDeviceRetryToCrosFpEvent(error->code);
+  } else {
+    result |= EC_MKBP_FP_ERR_ENROLL_OK;
+  }
+  result |= GetEnrollProgress(completed_stages, fp_device_get_nr_enroll_stages(device));
+  if (completed_stages != fp_device_get_nr_enroll_stages(device))
+    lfd->ReportResult(result);
+}
+
+void LibFpDevice::StartEnroll() {
+  LOG(INFO) << __func__;
+  GError *error = NULL;
+  FpPrint *fp_print = NULL;
+  FpPrint *temp_fp = fp_print_new(fp_device_);
+  uint32_t result = EC_MKBP_FP_ENROLL;
+  if (!temp_fp)
+    LOG(ERROR) << "failed to alloc new FpPrint.";
+  SetupFpPrint(temp_fp, user_hex_);
+  fp_print = fp_device_enroll_sync(fp_device_, temp_fp, cancellable_,
+                                   (FpEnrollProgress) OnEnrollProgress, this, &error);
+  if (fp_print) {
+    LOG(INFO) << "add new fingerprint at:" << std::hex << fp_print;
+    result |= EC_MKBP_FP_ERR_ENROLL_OK;
+    if (fprints_->len >= MaxTemplateCount()) {
+      LOG(INFO) << "new fingerprint will replace the last old one";
+      auto old_fp = g_ptr_array_remove_index(fprints_, fprints_->len -1);
+      g_object_unref(old_fp);
+    }
+    g_ptr_array_add(fprints_, fp_print);
+    dirty_.set(fprints_->len - 1);
+    result |= GetFullProgress();
+  } else {
+    if (error) {
+      LOG(ERROR) << "Enroll failed with error:" << error->message << " code:" << error->code;
+      result |= TransFpDeviceRetryToCrosFpEvent(error->code);
+      if (error->code == FP_DEVICE_ERROR_DATA_FULL)
+        HandleStorageFull();
+      g_clear_error(&error);
+    } else {
+      result |= EC_MKBP_FP_ERR_MATCH_NO_INTERNAL;
+      LOG(ERROR) << "No fingerprint enroll.";
+    }
+  }
+  ReportResult(result);
+}
+
+void LibFpDevice::StartVerify() {
+  LOG(INFO) << __func__;
+  GError *error = NULL;
+  FpPrint *verify_print = (FpPrint *) g_ptr_array_index(fprints_, 0);
+  if (!fp_device_verify_sync(fp_device_, verify_print, cancellable_,
+                             (FpMatchCb) OnMatchCb, this,
+                             NULL, NULL, &error)) {
+    if (error) {
+      LOG(WARNING) << "do verify failed with error:" << error->message;
+      g_clear_error(&error);
+    } else {
+      LOG(WARNING) << "do verify failed.";
+    }
+  }
+}
+
+void LibFpDevice::OnMatchCb(FpDevice *dev, FpPrint *match, FpPrint *print,
+    void *user_data, GError *error) {
+  LOG(INFO) << __func__;
+  LibFpDevice *lfd = CAST_TO_LFD(user_data);
+  uint32_t result = EC_MKBP_FP_MATCH;
+  if (error) {
+    LOG(WARNING) << "Match failed with error:" << error->message;
+    result |= TransFpDeviceMatchToCrosFpEvent(error->code);
+  } else {
+    if (match) {
+      uint32_t index;
+      LOG(INFO) << "Match is true";
+      if (g_ptr_array_find_with_equal_func(lfd->fprints_, match, (GEqualFunc) fp_print_equal, &index)) {
+        LOG(INFO) << "Match index:" << index;
+        result |= GetMatchIDX(index);
+        /*
+        if (print) {
+          g_ptr_array_remove_index(lfd->fprints_, index);
+					SetupFpPrint(print, lfd->user_hex_);
+			    g_ptr_array_insert(lfd->fprints_, index, print);
+          result |= EC_MKBP_FP_ERR_MATCH_YES_UPDATED;
+          lfd->dirty_.set(index);
+        } else {
+          result |= EC_MKBP_FP_ERR_MATCH_YES;
+        }
+        */
+        result |= EC_MKBP_FP_ERR_MATCH_YES;
+      } else {
+        LOG(WARNING) << "Match is not found in system store.";
+        result |= EC_MKBP_FP_ERR_MATCH_NO_TEMPLATES;
+      }
+    } else {
+      result |= EC_MKBP_FP_ERR_MATCH_NO;
+    }
+  }
+  lfd->ReportResult(result);
+}
+
+void LibFpDevice::ReportResult(uint32_t result) {
+  LOG(INFO) << __func__ << " result:" << result;
+  if ( write(write_fd_.get(), &result, sizeof result) < 0) {
+    LOG(ERROR) << "Failed to write result to pipe";
+  }
+}
+
+void LibFpDevice::StartIdentify() {
+  LOG(INFO) << __func__;
+  GError *error = NULL;
+  if (!fp_device_identify_sync(fp_device_, fprints_, cancellable_,
+                               (FpMatchCb) OnMatchCb, this,
+                               NULL, NULL, &error)) {
+    if (error) {
+      LOG(WARNING) << "do match failed with error:" << error->message;
+      g_clear_error(&error);
+    } else {
+      LOG(WARNING) << "do match failed.";
+    }
+  }
+}
+
+void LibFpDevice::OnFingerStateChanged(FpDevice *dev, void *user_data) {
+  LOG(INFO) << "Event: " << __func__;
+  int fg = static_cast<int>(fp_device_get_finger_status(dev));
+  if (g_libfpdev->mode_ == FpMode(FpMode::Mode::kFingerUp) ||
+      g_libfpdev->mode_ == FpMode(FpMode::Mode::kEnrollSessionFingerUp)) {
+    switch(fg) {
+      case 0:
+      case 1:
+        LOG(INFO) << "finger up";
+        g_libfpdev->ReportResult(EC_MKBP_FP_FINGER_UP);
+        break;
+      case 2:
+      case 3:
+        LOG(INFO) << "finger down";
+        break;
+      default:
+        break;
+    }
+  }
+}
+
+void LibFpDevice::SetReadFpState() {
+  LOG(INFO) << __func__ << std::hex << this;
+  g_signal_connect(G_OBJECT(fp_device_), "notify::finger-status", G_CALLBACK(OnFingerStateChanged), this);
+}
+
+bool LibFpDevice::SetFpMode(const FpMode& mode) {
+  LOG(INFO) << "Set mode:" << mode;
+  switch (mode.EnumVal()) {
+    case static_cast<int>(FpMode::Mode::kResetSensor):
+      return ResetFpDevice();
+    case static_cast<int>(FpMode::Mode::kEnrollSessionEnrollImage):
+      if (EC_MKBP_FP_ERRCODE(last_result_)) {
+        ReportResult(last_result_);
+        return true;
+      }
+      if (EC_MKBP_FP_ENROLL_PROGRESS(last_result_) > 0) {
+        LOG(INFO) << "continue enroll:" << EC_MKBP_FP_ENROLL_PROGRESS(last_result_);
+        return true;
+      }
+      if (thread_.joinable())
+         ResetFpDevice();
+      thread_ = std::thread(&LibFpDevice::StartEnroll, this);
+      mode_ = mode;
+      return true;
+    case static_cast<int>(FpMode::Mode::kEnrollSessionFingerUp):
+    case static_cast<int>(FpMode::Mode::kFingerUp):
+      mode_ = mode;
+      return true;
+    case static_cast<int>(FpMode::Mode::kMatch):
+      if (!fprints_->len) {
+        LOG(ERROR) << "No finger to match.";
+        return false;
+      }
+      if (mode == FpMode(FpMode::Mode::kFingerUp)) {
+        LOG(ERROR) << "We don't match after finger up event";
+        return false;
+      }
+      if (thread_.joinable()) {
+        LOG(INFO) << "Reset fp.";
+        ResetFpDevice();
+      }
+      LOG(INFO) << "Create new domatch thread.";
+      if (has_feature_identify_ && fprints_->len > 1)
+        thread_ = std::thread(&LibFpDevice::StartIdentify, this);
+      else
+        thread_ = std::thread(&LibFpDevice::StartVerify, this);
+      mode_ = mode;
+      return true;
+    case static_cast<int>(FpMode::Mode::kSensorMaintenance):
+      return false;
+    case static_cast<int>(FpMode::Mode::kNone):
+      mode_ = mode;
+      return ResetFpDevice();
+    default:
+      return true;
+  };
+}
+
+std::optional<std::bitset<32>> LibFpDevice::GetDirtyMap() {
+  return dirty_;
+}
+
+bool LibFpDevice::UploadTemplate(const VendorTemplate& tmpl) {
+  LOG(INFO) << __func__;
+  if (fprints_->len >= MaxTemplateCount()) {
+    biod_metrics_->SendUploadTemplateResult(EC_RES_OVERFLOW);
+    return false;
+  }
+  auto* metadata =
+      reinterpret_cast<const ec_fp_template_encryption_metadata_ext*>(tmpl.data());
+  auto* fprint_data =
+      reinterpret_cast<const guchar*>(tmpl.data());
+  fprint_data += sizeof(ec_fp_template_encryption_metadata_ext);
+  g_autoptr(GError) error = NULL;
+  FpPrint *print = fp_print_deserialize(fprint_data, metadata->template_size, &error);
+  if (error) {
+    LOG(ERROR) << "Error deserializing data:" << error->message;
+    biod_metrics_->SendUploadTemplateResult(EC_RES_INVALID_DATA_CRC);
+    return false;
+  }
+  g_ptr_array_add(fprints_, print);
+  biod_metrics_->SendUploadTemplateResult(EC_RES_SUCCESS);
+  return true;
+}
+
+std::unique_ptr<VendorTemplate> LibFpDevice::GetTemplate(int index) {
+  LOG(INFO) << __func__;
+  if (index == CrosFpDevice::kLastTemplate) {
+    auto opt_index = GetIndexOfLastTemplate();
+    if (!opt_index)
+      return nullptr;
+    index = *opt_index;
+    if (!dirty_.test(index))
+      return nullptr;
+  }
+  dirty_.set(index, false);
+  return GetTemplateInternal(index);
+}
+
+std::unique_ptr<VendorTemplate> LibFpDevice::GetTemplateInternal(int index) {
+  LOG(INFO) << __func__;
+  struct ec_fp_template_encryption_metadata_ext metadata = {
+    .meta = {.struct_version = LIB_FP_TEMPLATE_FORMAT_VERSION}
+    };
+  LOG(INFO) << "get template index:" << index;
+  FpPrint *print = (FpPrint *)g_ptr_array_index(fprints_, index);
+  if (!print) {
+    LOG(ERROR) << "no fingerprint found at " << index;
+    return nullptr;
+  } else {
+    LOG(INFO) << "got fingerprint at:" << std::hex << print;
+  }
+  GError *error = NULL;
+  g_autofree guchar *data = NULL;
+  if (!fp_print_serialize(print, &data, &metadata.template_size, &error)) {
+    if (error) {
+      LOG(ERROR) << "Error serialize data:" << error->message;
+      g_clear_error(&error);
+    } else {
+      LOG(ERROR) << "Failed to serialize template";
+    }
+    return nullptr;
+  }
+  LOG(INFO) << "copy to Vendor template data size:" << metadata.template_size
+    << " address:" << std::hex << data ;
+  size_t total_size = sizeof metadata + metadata.template_size;
+  std::unique_ptr<VendorTemplate> tmpl(new VendorTemplate(total_size));
+  auto* meta_array =
+    reinterpret_cast<const char*>(&metadata);
+  auto* pos = tmpl->data();
+  std::memcpy(pos, meta_array, sizeof metadata);
+  std::memcpy(pos + sizeof metadata, data, metadata.template_size);
+  LOG(INFO) << "return tmpl size:" << tmpl->size() << " address:" << tmpl->data();
+  return tmpl;
+}
+
+std::optional<int> LibFpDevice::GetIndexOfLastTemplate() {
+  if (fprints_->len >= MaxTemplateCount() || fprints_->len < 1) {
+    LOG(ERROR) << "Invalid index of last template: " << fprints_->len << ".";
+    return std::nullopt;
+  }
+  return fprints_->len - 1;
+};
+
+bool LibFpDevice::SetContext(std::string user_hex) {
+  LOG(INFO) << __func__ << " " << user_hex;
+  bool success = true;
+  FpMode original_mode = mode_;
+  if (mode_ == FpMode(FpMode::Mode::kModeInvalid)) {
+    LOG(ERROR) << "Unable to get FP Mode.";
+    success = false;
+  }
+	if (original_mode == FpMode(FpMode::Mode::kMatch)) {
+    LOG(INFO) << "Attempting to set context with match mode.";
+    success = ResetFpDevice();
+  } else if (original_mode != FpMode(FpMode::Mode::kNone)) {
+    LOG(ERROR) << "Attempting to set context with mode: " << original_mode;
+    success = false;
+  }
+  biod_metrics_->SendSetContextMode(original_mode);
+
+  if (original_mode == FpMode(FpMode::Mode::kMatch)) {
+    SetFpMode(original_mode);
+  }
+  biod_metrics_->SendSetContextSuccess(success);
+  user_hex_ = user_hex;
+  return success;
+}
+
+bool LibFpDevice::ResetContext() {
+  if (mode_ != FpMode(FpMode::Mode::kNone))
+    LOG(ERROR) << "Attempting to reset context with mode: " << mode_;
+  CHECK(biod_metrics_);
+  biod_metrics_->SendResetContextMode(mode_);
+  if (fprints_->len > 0)
+    g_ptr_array_remove_range(fprints_, 0, fprints_->len);
+  return SetContext(std::string());
+}
+
+bool LibFpDevice::OpenFpDevice() {
+  GError *error;
+  LOG(INFO) << __func__;
+  if (!fp_device_open_sync(fp_device_, NULL, &error)) {
+    LOG(ERROR) << "Failed to open fingerprinter " << fp_device_get_name(fp_device_);
+    g_clear_error (&error);
+    return false;
+  }
+  mode_ = FpMode(FpMode::Mode::kNone);
+  UpdateFpInfo();
+  SetReadFpState();
+  ResetContext();
+  g_libfpdev = this;
+  LOG(INFO) << "libfprint device opened";
+  return true;
+}
+
+void LibFpDevice::HandleStorageFull() {
+  g_autoptr(GError) error = NULL;
+  GPtrArray * s_fprints = fp_device_list_prints_sync(fp_device_, NULL, &error);
+  if (!s_fprints || s_fprints->len == 0) {
+    if (error)
+      LOG(ERROR) << "Failed to list storage prints, error:" << error->message;
+    else
+      LOG(ERROR) << "No print found, but the storage is full.";
+    if (fp_device_clear_storage_sync(fp_device_, NULL, NULL)) {
+      LOG(INFO) << "Clean storage of fingerprint device";
+    } else {
+      LOG(ERROR) << "Failed to Clean storage of fintgerprint device";
+    }
+    return;
+  }
+  FpPrint *print = (FpPrint *) g_ptr_array_index(s_fprints, 0);
+  if(!fp_device_delete_print_sync(fp_device_, print, NULL, &error)) {
+    LOG(ERROR) << "Failed to delete the oldest enrolled fingerprint. error:"
+      << error->message;
+    return;
+  }
+}
+
+void LibFpDevice::OnEventReadable() {
+  uint32_t result;
+  ssize_t sz = read(read_fd_.get(), &result, sizeof result);
+  if (sz < sizeof result)
+    return;
+  if (result != EC_MKBP_FP_FINGER_UP && result != EC_MKBP_FP_FINGER_DOWN)
+    last_result_ = result;
+  if (EC_MKBP_FP_ENROLL_PROGRESS(result) == 100) {
+    last_result_ = 0;
+    mode_ = FpMode(FpMode::Mode::kNone);
+  }
+  mkbp_event_.Run(result);
+}
+
+bool LibFpDevice::Init() {
+  GPtrArray *devices;
+  int p[2];
+  fp_context_= fp_context_new();
+  if (pipe(p) < 0) {
+    LOG(ERROR) << "Failed to open pipe ";
+    return false;
+  }
+  read_fd_ = base::ScopedFD(p[0]);
+  write_fd_ = base::ScopedFD(p[1]);
+  devices = fp_context_get_devices(fp_context_);
+  if (!devices || !devices->len || devices->len < 1) {
+    LOG(ERROR) << "No fingerprint found!";
+		return false;
+  }
+  fp_device_ = (FpDevice *)g_ptr_array_index(devices, 0);
+  fprints_ = g_ptr_array_new_with_free_func(g_object_unref);
+  LOG(INFO) << "Got device " << fp_device_get_driver(fp_device_) << ":" <<
+      fp_device_get_device_id(fp_device_) << " name:" << fp_device_get_name(fp_device_);
+  g_ptr_array_free(devices, !OpenFpDevice());
+  cancellable_ = g_cancellable_new();
+  watcher_ = base::FileDescriptorWatcher::WatchReadable(
+    read_fd_.get(), base::BindRepeating(&LibFpDevice::OnEventReadable,
+                                        base::Unretained(this)));
+  self_pid_ = pthread_self();
+
+  LOG(INFO) << "After thread open. base thread:" << std::hex << self_pid_;
+
+  return true;
+}
+
+}// namespace biod
Index: biod/biometrics_daemon.cc
===================================================================
--- biod.orig/biometrics_daemon.cc
+++ biod/biometrics_daemon.cc
@@ -428,8 +428,13 @@ BiometricsDaemon::BiometricsDaemon() {
       "%s/%s", kBiodServicePath, kCrosFpBiometricsManagerName));
 
   auto biod_metrics = std::make_unique<BiodMetrics>();
+#if defined(LIB_FPRINT)
+  auto cros_fp_device = LibFpDevice::Create(
+    biod_metrics.get(), std::make_unique<ec::EcCommandFactory>());
+#else
   auto cros_fp_device = CrosFpDevice::Create(
       biod_metrics.get(), std::make_unique<ec::EcCommandFactory>());
+#endif
   CHECK(cros_fp_device) << "Failed to initialize CrosFpDevice.";
   auto power_button_filter = PowerButtonFilter::Create(bus_);
   CHECK(power_button_filter) << "Failed to initialize PowerButtonFilter.";
Index: biod/cros_fp_biometrics_manager.h
===================================================================
--- biod.orig/cros_fp_biometrics_manager.h
+++ biod/cros_fp_biometrics_manager.h
@@ -16,7 +16,9 @@
 #include <base/values.h>
 #include <dbus/bus.h>
 #include <base/timer/timer.h>
-
+#if defined(LIB_FPRINT)
+#include "biod/lib_fp_device.h"
+#endif
 #include "biod/cros_fp_device.h"
 #include "biod/cros_fp_record_manager.h"
 #include "biod/power_button_filter_interface.h"
